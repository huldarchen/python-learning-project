#!usr/bin/env python
# -*- coding:utf-8 _*-
"""
@author:huldar
@file: listDemo.py
@time: 2018/12/18
"""
# 基本概念
"""
列表 list
  问题:
    如何将计算机运算的数据临时保存在一个地方,同时又方便添加,删除和修改等操作
  容器
列表的定义:
  列表是一种容器
  列表是可以被改变的序列
  列表是由一系列特定元素组成的,元素与元素之间可能没有任何的关联关系,但他们之间有先后顺序关系

python3的中的序列类型:
  字符串 str
  列表 list
  元组 tuple
  字节串 bytes
  字节数组 bytearray
创建空列表的字面值表达式
  []  # 创建一个空列表
  L = []  变量L绑定一个新创建的空列表
创建非空的列表的字面值:
  L = [1, 2, 3, 4]#L绑定一个新创建且含有四个元素的列表
  L = ['Beijing', 'Shanghai', 'Shenzhen']
  L = [1, 'Two', 3.14, '四']
  L = [1, 2, [3.1, 3.2, 3.2], 4]  

列表的构造函数 list
  list()  生成一个空的列表,等同于 []
  list(iterable)  用可迭代对象创建一个列表
"""
# 运算
"""
算术运算
 + += * *= (运算规则与字符串的运算规则相同)

    + 用于拼接列表,生成新的列表
    += 用原列表与右侧可迭代对象追加来修改原列表
     列表变量 += 可迭代对象
     ****+= 是改变原来的列表对象,并不会创建新的列表
    * 生成重复的列表
    *= 生成重复的列表,并改变对变量的绑定
"""

"""
比较运算
     < <= > >= == !=
    和字符串的比较运算一致
"""

# 练习
'''
写一个程序，任意输入一个数，判断这个数是否是素数(prime)
'''
# inputNum = int(input("请输入一个整数:"))
# primeFlag = True
# for i in range(2, inputNum):
#     if inputNum % i == 0:
#         print(inputNum, "不是素数")
#         primeFlag = False
#         break
# if primeFlag:
#     print(inputNum, "是素数")

# in / not in运算符
"""
列表的 in / not in 运算符
  判断一个值是否存在于列表中，如果存在返回True,否则返回 False
  同字符串的 in 运算符 用于检查一个值是否存在于列表中，如果存在返回True, 否则返回False
"""
# 列表的索引
"""
列表的索引操作
  语法:
    列表[整数表达式]
  用法:
    与字符串索引的用法相同(分为正向索引和反向索引)
"""
# 列表的索引赋值

"""
列表的索引赋值:
  列表是可变的，可以通过索引赋值改变列表中的元素
  语法:
    列表[整数表达式] = 表达式
  作用:
    改变列表中索引的绑定关系
"""
# 列表的切片

"""
列表的切片
  列表[:]
  列表[::]
  列表的切片取值返回一个新的列表，规则等同于字符串切片规则
"""
# 列表的切片赋值
"""
列表的切片赋值:
  作用:
    可以改变原列表的数据排列，可以插入和修改数据
    可以用切片改变列表的对应元素的值
  语法:
    列表[切片]　= 可迭代对象
　　说明:
    切片赋值的赋值运算符(=) 的右侧必须是一个可迭代对象
"""
listOne = [2, 3, 4]
# listOne[0:1] = [1.1, 2.2]#[1.1, 2.2, 3, 4]
# listOne[2:] = [3.3, 4.4, 5.5] #[2, 3, 3.3, 4.4, 5.5]
# listOne[:] = [3, 4]#[3, 4]
listOne[0:0] = [1, 2]
print(listOne)
# 切片的注意
"""
切片的注意事项:
  对于步长不等于1的切片赋值,赋值运算符的右侧的可迭代对象提供元素的个数一定要等于切片切出的段数
   示例:
    listOne = [1, 2, 3, 4, 5, 6, 7, 8]
    listOne[1::2] = "ABCD"  # 对的
    listOne[1::2] = "ABCDEF"  # 错的
"""
# 切片的删除
"""
del 语句 用于删除列表的元素
  语法:
    del 列表[索引] 
        如: del L[0]
    del 列表[切片]
        如: del L[1::2]
"""
# 拷贝
"""
深拷贝和浅拷贝

浅拷贝 shallow copy
  浅拷贝是指在复制过程中，只复制一层变量，不会复制深层变量绑定的对象的复制过程
示意:
  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = L1.copy()  # 浅拷贝
  print(L1)  # [1, 2, [3.1, 3.2]]
  print(L2)  # [1, 2, [3.1, 3.2]]
  L2[2][0] = 3.14
  print(L1)  # [1, 2, [3.14, 3.2]]
  print(L2)  # [1, 2, [3.14, 3.2]]

深拷贝 deep copy
  复制对象及对象关联的对象一起复制过程叫深拷贝
示意代码
  import copy  # 导入复制模块
  L = [3.1, 3.2]
  L1 = [1, 2, L]
  L2 = copy.deepcopy(L1) 　# 深拷贝
  print(L1)  # [1, 2, [3.1, 3.2]]
  print(L2)  # [1, 2, [3.1, 3.2]]
  L2[2][0] = 3.14
  print(L1)  # [1, 2, [3.1, 3.2]]　　<<< L1不变
  print(L2)  # [1, 2, [3.14, 3.2]]
"""

# 列表与字符串的比较
"""
列表和字符串比较：
　1. 都是序列，有先后顺序关系，有相同的运算操作
  2. 列表是可变是，字符串是不可变的
  3. 列表可以存任意类型的数据，字符串只能存字符
"""
"""
字符串的文本解析方法:
  S.split(sep=None) 将字符串，使用 sep作用分隔符分割S字符串，返回分割后的字符串列表，当不给定参数时，用空白字符作为分隔符分割

  S.join(iterable) 用可迭代对象中的字符串，返回一个中间用S进行分隔的字符串
"""
splitStrOne = 'Beijing is capital'
splitList = splitStrOne.split()
print(type(splitList), splitList)

splitStrTwo = 'hello#world#tarena'
str_two_split = splitStrTwo.split('#')
print(str_two_split)
print('-'.join("hello"))
# 列表推导式
"""
列表推导式 list comprehension
  列表推导式是用可迭代对象创建列表的表达式

  作用:
    用简易方法生成列表
  语法:
    [表达式 for 变量 in 可迭代对象]
    或
    [表达式 for 变量 in 可迭代对象 if 真值表达式]
  示例:
    # 生成一个数值为1~9的平方的列表
    # [1, 4, 9, 16, .... 81]
    # 不用推导式:
    L = []
    for i in range(1, 10):
        L.append(i**2)
    # 推导式实现
    L = [i ** 2 for i in range(1, 10)]
"""

print([i for i in range(1, 100, 2)])
print([i for i in range(1, 100) if i % 2 == 0])
# 列表推导式的嵌套
"""
列表推导式的嵌套
  语法:
    [表达式
      for 变量1 in 可迭代对象1 if真值表达式1
        for 变量2 in 可迭代对象2 if 真值表达式2 ...]
"""
print(
    [x + y for x in 'ABC' for y in '123']
)
